CREATE PROCEDURE "Register" (@firstName VARCHAR(250), @lastName VARCHAR(250), @email VARCHAR(250), @password VARCHAR(250)) AS -- password longer than dbVersion so it can be hashed to the 64 length hex
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION
        -- status number returned, userid returned, output a response message
        -- SELECT @@IDENTITY -- contains the last identity value thats generated by identity
        -- SELECT SCOPE_IDENTITY() -- like @@identity but for current scope, limited to specific scope
        -- HASHBYTES('SHA_256', @password) used to hash the passwords so not stored in plaintext as more secure        

        INSERT INTO Users(firstName, lastName, email, Users.[password])
        VALUES(@firstName, @lastName, @email, HASHBYTES('SHA2_256', @password))
                
        IF ((SELECT COUNT(email) FROM Users WHERE email = @email) > 1) -- if multiple emails present, rollback 
        BEGIN            
            ROLLBACK
            RAISERROR('Email already exists', 1, 0)
        END

        COMMIT 
        RETURN 'userID: ' + @@IDENTITY
    END TRY
    BEGIN CATCH
        -- SOME ERROR -- Rollback
        RAISERROR('Error', 2, 0)
    END CATCH

END

GO

CREATE PROCEDURE [dbo].[ValidateUser](@email VARCHAR(250), @password VARCHAR(250))
AS BEGIN    
    BEGIN TRY    
    DECLARE @passwordHashed VARBINARY(256)
    DECLARE @validated INT
        SET @passwordHashed =  HASHBYTES('SHA2_256', @password)        
        -- return 1 if both match, return 0 if not
        -- if match insert into sessions table, userID

        IF ((SELECT COUNT(userID) FROM Users WHERE email = @email AND [password] = @passwordHashed) >= 1)
        BEGIN            
            -- if 1 then it exists and matches, else not match or doesnt exist
            SET @validated = 1
            BEGIN TRANSACTION
            INSERT INTO Sessions(sessionDateTime, userID) VALUES(GETDATE(), (SELECT userID FROM Users WHERE email = @email AND [password] = @passwordHashed))
            COMMIT

        END
        ELSE SET @validated = 0

        RETURN @validated
    END TRY
    BEGIN CATCH
        ROLLBACK
        RAISERROR('Error', 2, 0)
    END CATCH
END

GO

CREATE PROCEDURE [dbo].[UpdateUser](@firstName VARCHAR(250) = NULL, @lastName VARCHAR(250) = NULL, @email VARCHAR(250) = NULL, @password VARCHAR(250) = NULL, @userID INT) AS
IF (@userID IS NULL) 
BEGIN
    RAISERROR('No userID entered', 4, 0)
END
ELSE
BEGIN
BEGIN TRY  
    BEGIN TRANSACTION
    IF (@firstName IS NOT NULL) 
    BEGIN            
        UPDATE Users SET firstName = @firstName WHERE userID = @userID
    END

    IF (@lastName IS NOT NULL) 
    BEGIN            
        UPDATE Users SET lastName = @lastName WHERE userID = @userID
    END

    IF (@email IS NOT NULL) 
    BEGIN            
        UPDATE Users SET email = @email WHERE userID = @userID
    END

    IF (@password IS NOT NULL) 
    BEGIN            
        UPDATE Users SET [password] = HASHBYTES('SHA2_256', @password) WHERE userID = @userID
    END

    COMMIT
END TRY
BEGIN CATCH
    RAISERROR('Error', 2, 0)
END CATCH
END 

GO

CREATE PROCEDURE DeleteUser(@userID INT) AS
IF (@userID IS NOT NULL)
BEGIN
IF ((SELECT COUNT(userID) FROM Users WHERE userID = @userID) >= 1) 
BEGIN 
BEGIN TRANSACTION
    BEGIN TRY  
        DELETE FROM Users WHERE userID = @userID
        COMMIT
    END TRY
    BEGIN CATCH
        ROLLBACK
    END CATCH
END
END
